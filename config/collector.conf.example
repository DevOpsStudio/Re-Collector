// Graylog Collector example configuration.

// URL to REST API of Graylog server this collector registers at
server-url = "http://localhost:12900"

// Enable registration with the Graylog server. (enabled by default)
//enable-registration = true

// The id used to identify this collector. Can be either a string which is used as id,
// or the location of a file if prefixed with "file:". If the file does not exist,
// an id will be generated and written to that file. If it exists, it is expected
// to contain a single string without spaces which will be used for the id.
// Defaults to "file:config/collector-id" if not specified.
collector-id = "file:config/collector-id"

// Override the detected local host name and send a custom host name
//host-name = "my-custom-host-name"

//inputs {
//  // A simple file input that follows /var/log/syslog.
//  local-syslog {
//    type = "file"
//    path = "/var/log/syslog"
//    charset = "utf-8"
//    content-splitter = "newline"
//  }
//
//  // A globbing file input. Follows all *.access.log files that exist and will be created in /var/log/apache2.
//  // You have to split the path into path-glob-root and path-glob-pattern. A usual "/var/log/**/*.{log,txt}"
//  // becomes path-glob-root="/var/log" and path-glob-pattern="**/*.{log,txt}".
//  apache-access {
//    type = "file"
//    path-glob-root = "/var/log/apache2"
//    path-glob-pattern = "*.access.log"
//  }
//
//  // An input to read from the given Windows event log. Only works on Windows.
//  // Available source-names: Application, System, Security
//  win-application {
//    type = "windows-eventlog"
//    source-name = "Application"
//    poll-interval = 1s
//  }
//}

//outputs {
//  // GELF output to send messages to a Graylog server. Usually only type, host and port are needed.
//  // The other options are for TLS support and to fine-tune the GELF client library.
//  gelf-tcp {
//    type = "gelf"
//    host = "127.0.0.1"
//    port = 12201
//    client-tls = false
//    client-tls-cert-chain-file = "/path/to/cert-chain.pem"
//    client-tls-verify-cert = true
//    client-queue-size = 512
//    client-connect-timeout = 5000
//    client-reconnect-delay = 1000
//    client-tcp-no-delay = true
//    client-send-buffer-size = 32768
//  }
//
//  // GELF output to send messages to a Graylog server using UDP.
//  // NOTE: GELF via UDP *does not* support TLS, so the connection will be unencrypted!
//  gelf-udp {
//    type = "gelf"
//    protocol = "UDP"
//    host = "127.0.0.1"
//    port = 12201
//    client-queue-size = 512
//    client-send-buffer-size = 32768
//  }
//
//  // Prints all messages to STDOUT. Useful for debugging. Do not enable in production usage!
//  console {
//    type = "stdout"
//  }
//}
